import"./style.css";import*as THREE from"../node_modules/three/build/three.module.js";import fragmentShader from"./shader/fragment-shader.glsl";import vertexShader from"./shader/vertex-shader.glsl";import{MeshLine,MeshLineMaterial}from"../node_modules/meshline";import aboutMe from"./about";const state={isMouseTrailLine:!1},btn1=document.querySelector("#mouseLineTrail"),btn2=document.querySelector("#mouseCircleTrail"),toggleDiv=document.querySelector("#mask");function toggleActivity(){toggleDiv.style.right="auto",state.isMouseTrailLine?toggleDiv.style.animation="revealLeft 0.2s forwards":(toggleDiv.style.right="21px",toggleDiv.style.animation="revealRight 0.2s forwards")}function changeMouseTrail(){!0===state.isMouseTrailLine?state.isMouseTrailLine=!1:state.isMouseTrailLine=!0,btn1.disabled=!!state.isMouseTrailLine,btn2.disabled=!state.isMouseTrailLine,toggleActivity(),setMouseTrail()}btn1.addEventListener("click",changeMouseTrail),btn2.addEventListener("click",changeMouseTrail),btn1.disabled=!!state.isMouseTrailLine,btn2.disabled=!state.isMouseTrailLine,toggleActivity();const canvas=document.querySelector("canvas.webgl"),mouseTrailContainer=document.querySelector(".mouse-trail-container"),scene=new THREE.Scene;scene.background=new THREE.Color(5605254);const parameters={count:150,radius:5,insideColor:"#9F2B68",outsideColor:"#BF40BF"};export function setPosition(e,t){for(let i=0;i<t;i++){const s=3*i,o=3*(i/(t-1)-.5),n=.5*Math.sin(i/10.5);e[s]=o,e[s+1]=n,e[s+2]=-1}return e}const resolution=new THREE.Vector2(canvas.width,canvas.height),colors=["#00E400","#FF80FF"];let lines=[],material=null,geometry=null,meshLine=null,points=null;function setMouseTrail(){lines=[];for(let e=0;e<scene.children.length;e++)(scene.children[e].geometry&&"MeshLine"===scene.children[e].geometry.type||"Points"===scene.children[e].type)&&(null!==material&&material.dispose(),null!==geometry&&geometry.dispose(),scene.remove(scene.children[e]),e--);if(state.isMouseTrailLine){const e=[7,4];for(let t=0;t<colors.length;t++){geometry=new MeshLine;const i=setPosition(new Float32Array(3*parameters.count),parameters.count);geometry.setPoints(i),material=new MeshLineMaterial({color:colors[t],resolution,sizeAttenuation:0,lineWidth:e[t]}),meshLine=new THREE.Mesh(geometry,material),lines.push({line:geometry,positions:i}),scene.add(meshLine)}}else{geometry=new THREE.BufferGeometry;const e=new Float32Array(3*parameters.count),t=new Float32Array(parameters.count);for(let i=0;i<parameters.count;i++){const s=3*i,o=Math.random()*parameters.radius,n=new THREE.Color(parameters.insideColor),r=new THREE.Color(parameters.outsideColor),a=n.clone();a.lerp(r,o/parameters.radius),e[s]=a.r,e[s+1]=a.g,e[s+2]=a.b,t[i]=Math.random()}material=new THREE.ShaderMaterial({vertexShader,fragmentShader,depthWrite:!1,blending:THREE.AdditiveBlending,vertexColors:!0,uniforms:{u_size:{value:1e3},u_time:{value:0},u_mouse:{value:new THREE.Vector2}}});const i=setPosition(new Float32Array(3*parameters.count),parameters.count);geometry.setAttribute("position",new THREE.BufferAttribute(i,3)),geometry.setAttribute("color",new THREE.BufferAttribute(e,3)),geometry.setAttribute("a_scale",new THREE.BufferAttribute(t,1)),lines.push({line:geometry,positions:i}),points=new THREE.Points(geometry,material),scene.add(points)}}setMouseTrail();const sizes={width:window.innerWidth,height:window.innerHeight};window.addEventListener("resize",(()=>{sizes.width=window.innerWidth,sizes.height=window.innerHeight,camera.aspect=sizes.width/sizes.height,camera.updateProjectionMatrix(),renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}));let mouse=new THREE.Vector3(0,0,1);function handleMouseMove(e){mouse.x=(e.clientX+window.pageXOffset)/sizes.width*2-1,mouse.y=-(e.clientY+window.pageYOffset)/sizes.height*2+1,mouse.z=1,"ShaderMaterial"===material.type&&(material.uniforms.u_mouse.value.x=.001*e.clientX,material.uniforms.u_mouse.value.y=.001*e.clientY);var t=new THREE.Vector3(mouse.x,mouse.y,.5);t.unproject(camera);var i=t.sub(camera.position).normalize(),s=-camera.position.z/i.z,o=camera.position.clone().add(i.multiplyScalar(s));mouse=o}mouseTrailContainer.addEventListener("mousemove",handleMouseMove);const camera=new THREE.PerspectiveCamera(75,sizes.width/sizes.height,.1,100);camera.position.z=5,scene.add(camera);const renderer=new THREE.WebGLRenderer({canvas});renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2));const clock=new THREE.Clock,tick=()=>{lines.forEach((function(e){for(let t=0;t<parameters.count;t++){const i=3*t,s=3*(t-1);if(0===i)e.positions[0]=mouse.x,e.positions[1]=mouse.y,e.positions[2]=mouse.z;else{const t=new THREE.Vector3(e.positions[i],e.positions[i+1],e.positions[i+2]),o=new THREE.Vector3(e.positions[s],e.positions[s+1],e.positions[s+2]),n=t.lerp(o,.9);e.positions[i]=n.x,e.positions[i+1]=n.y,e.positions[i+2]=mouse.z}}const t=clock.getElapsedTime();e.line.setPoints?e.line.setPoints(e.positions,(e=>1-e)):(e.line.attributes.position.needsUpdate=!0,material.uniforms.u_time.value=t)})),renderer.render(scene,camera),window.requestAnimationFrame(tick)};tick(),aboutMe();